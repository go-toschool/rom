{% import "github.com/iancoleman/strcase" %}
{% func State(module string, actions []string) %}import {Map} from 'immutable'

// --begin-actions-types--
{% for _, action := range actions %}{%code upper := strcase.ToScreamingSnake(action) %}export const {%s upper %} = '{%s upper %}'
export const {%s upper %}_SUCCESS = '{%s upper %}_SUCCESS'
export const {%s upper %}_FAILURE = '{%s upper %}_FAILURE'
{% endfor %}// --end-actions-types--

// --begin-actions-creators--
{% for _, action := range actions %}{%code upper := strcase.ToScreamingSnake(action) %}{%code cammel := strcase.ToLowerCamel(action) %}export const {%s cammel %} = (data) => ({
  type: {%s upper %},
  payload: {data}
})

export const {%s cammel %}Success = (response) => ({
  type: {%s upper %}_SUCCESS,
  payload: {response}
})

export const {%s cammel %}Failure = (error) => ({
  type: {%s upper %}_FAILURE,
  payload: {error}
})
{% endfor %}// --end-actions-creators--

// --begin-initial-state--
const INITIAL_STATE = Map({{% for _, action := range actions %}{%code cammel := strcase.ToLowerCamel(action) %}
  {%s cammel %}Fetching: false,
  {%s cammel %}Fetched: false,
  {%s cammel %}Error: null,
  {%s cammel %}Data: null,
  {%s cammel %}Response: null,
{% endfor %}})
// --end-initial-state--

// --begin-reducer--
export default function reducer (state = INITIAL_STATE, { type, payload }) {
  switch (type) {
    {% for _, action := range actions %}{%code upper := strcase.ToScreamingSnake(action) %}{%code cammel := strcase.ToLowerCamel(action) %}case {%s upper %}: {
      const {data} = payload
      return {
        ...state,
        {%s cammel %}Data: data,
        {%s cammel %}Fetching: true,
      }
    }
    
    case {%s upper %}_SUCCESS: {
      const {response} = payload
      return {
        ...state,
        {%s cammel %}Response: response,
        {%s cammel %}Fetching: false,
        {%s cammel %}Fetched: true,
      }
    }

    case {%s upper %}_FAILURE: {
      const {error} = payload
      return {
        ...state,
        {%s cammel %}Error: error,
        {%s cammel %}Fetching: false,
        {%s cammel %}Fetched: true,
      }
    }
    {% endfor %}
    default:
      return state
  }
}
// --end-reducer--
{% endfunc %}
